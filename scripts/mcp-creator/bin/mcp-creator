#!/usr/bin/env node

/**
 * MCP Server Generator CLI
 * A command-line tool for creating MCP servers
 */

const inquirer = require('inquirer');
const chalk = require('chalk');
const path = require('path');
const fs = require('fs');
const { execSync } = require('child_process');

// Import generator modules
const prompting = require('../generators/app/lib/prompting');
const configuring = require('../generators/app/lib/configuring');
const writing = require('../generators/app/lib/writing');

// Create a mock generator object
const mockGenerator = {
  prompt: inquirer.prompt,
  user: {
    git: {
      name: () => {
        try {
          return execSync('git config --get user.name').toString().trim();
        } catch (error) {
          return '';
        }
      }
    }
  },
  destinationPath: (p) => path.join(process.cwd(), p),
  fs: {
    write: (path, content) => {
      // Ensure the directory exists
      const dir = path.substring(0, path.lastIndexOf('/'));
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      
      fs.writeFileSync(path, content, 'utf8');
    },
    writeJSON: (path, json) => {
      // Ensure the directory exists
      const dir = path.substring(0, path.lastIndexOf('/'));
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      
      fs.writeFileSync(path, JSON.stringify(json, null, 2), 'utf8');
    }
  },
  log: console.log
};

// Display welcome message
console.log(chalk.blue('=============================================='));
console.log(chalk.blue('  MCP Server Generator                       '));
console.log(chalk.blue('=============================================='));
console.log();

// Run the generator
async function run() {
  try {
    // Prompt for configuration
    console.log(chalk.yellow('Please answer the following questions:'));
    const answers = await prompting(mockGenerator);
    
    // Configure the project structure
    console.log(chalk.yellow('\nConfiguring project structure...'));
    const structure = configuring(answers);
    
    // Create the files
    console.log(chalk.yellow('\nGenerating files...'));
    writing(mockGenerator, answers, structure);
    
    // Display success message
    console.log(chalk.green('\nMCP server created successfully!'));
    console.log(chalk.white(`\nNext steps:`));
    console.log(chalk.white(`  cd ${answers.name}`));
    console.log(chalk.white('  npm install'));
    
    if (answers.complexity !== 'basic') {
      console.log(chalk.white('  npm run dev     # Start in development mode'));
    }
    
    console.log(chalk.white('  npm run build   # Build the project'));
    console.log(chalk.white('  npm start       # Start the server'));
    
    if (answers.includeTests) {
      console.log(chalk.white('  npm test        # Run tests'));
    }
    
    console.log(chalk.green('\nHappy coding!'));
  } catch (error) {
    console.error(chalk.red('Error:'), error);
    process.exit(1);
  }
}

// Run the generator
run();